name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: cosmomedia_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Copy test environment
      run: cp .env.test .env
    
    - name: Run tests
      run: npm run test:services
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: root
        DB_PASSWORD: test_password
        DB_NAME: cosmomedia_test

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint

  build:
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push base image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: docker/Dockerfile.base
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/cosmomedia-base:latest
    
    - name: Build and push service images
      run: |
        services=("gateway" "employee" "client-project" "billing" "service-catalog")
        for service in "${services[@]}"; do
          docker build -t ${{ secrets.DOCKER_USERNAME }}/cosmomedia-${service}:latest -f ${service}-service/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/cosmomedia-${service}:latest
        done

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster staging-cluster --service cosmomedia-gateway --force-new-deployment
        aws ecs update-service --cluster staging-cluster --service cosmomedia-employee --force-new-deployment
        aws ecs update-service --cluster staging-cluster --service cosmomedia-client-project --force-new-deployment
        aws ecs update-service --cluster staging-cluster --service cosmomedia-billing --force-new-deployment
        aws ecs update-service --cluster staging-cluster --service cosmomedia-service-catalog --force-new-deployment

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://api.cosmomedia.com
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster production-cluster --service cosmomedia-gateway --force-new-deployment
        aws ecs update-service --cluster production-cluster --service cosmomedia-employee --force-new-deployment
        aws ecs update-service --cluster production-cluster --service cosmomedia-client-project --force-new-deployment
        aws ecs update-service --cluster production-cluster --service cosmomedia-billing --force-new-deployment
        aws ecs update-service --cluster production-cluster --service cosmomedia-service-catalog --force-new-deployment
