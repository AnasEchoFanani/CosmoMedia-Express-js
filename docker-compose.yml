version: '3.8'

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  # Database
  db:
    image: mysql:8.0
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$${MYSQL_ROOT_PASSWORD}"]
      <<: *default-healthcheck
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    volumes:
      - db_data:/var/lib/mysql

  # Redis for caching
  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *default-healthcheck
    volumes:
      - redis_data:/data

  # Gateway Service
  gateway:
    build:
      context: .
      dockerfile: gateway-service/Dockerfile
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:3000/live"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"


  # Employee Service
  employee:
    build:
      context: .
      dockerfile: employee-service/Dockerfile
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:3001/live"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env


  # Client Project Service
  client-project:
    build:
      context: .
      dockerfile: client-project-service/Dockerfile
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:3002/live"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env


  # Billing Service
  billing:
    build:
      context: .
      dockerfile: billing-service/Dockerfile
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:3003/live"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env


  # Service Catalog
  service-catalog:
    build:
      context: .
      dockerfile: service-catalog/Dockerfile
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:3004/live"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env


volumes:
  db_data:
  redis_data:
